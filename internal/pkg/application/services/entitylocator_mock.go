// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"sync"
)

// Ensure, that EntityLocatorMock does implement EntityLocator.
// If this is not the case, regenerate this file with moq.
var _ EntityLocator = &EntityLocatorMock{}

// EntityLocatorMock is a mock implementation of EntityLocator.
//
//	func TestSomethingThatUsesEntityLocator(t *testing.T) {
//
//		// make and configure a mocked EntityLocator
//		mockedEntityLocator := &EntityLocatorMock{
//			LocateFunc: func(ctx context.Context, entityType string, entityID string) (float64, float64, error) {
//				panic("mock out the Locate method")
//			},
//		}
//
//		// use mockedEntityLocator in code that requires EntityLocator
//		// and then make assertions.
//
//	}
type EntityLocatorMock struct {
	// LocateFunc mocks the Locate method.
	LocateFunc func(ctx context.Context, entityType string, entityID string) (float64, float64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Locate holds details about calls to the Locate method.
		Locate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityType is the entityType argument value.
			EntityType string
			// EntityID is the entityID argument value.
			EntityID string
		}
	}
	lockLocate sync.RWMutex
}

// Locate calls LocateFunc.
func (mock *EntityLocatorMock) Locate(ctx context.Context, entityType string, entityID string) (float64, float64, error) {
	if mock.LocateFunc == nil {
		panic("EntityLocatorMock.LocateFunc: method is nil but EntityLocator.Locate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		EntityType string
		EntityID   string
	}{
		Ctx:        ctx,
		EntityType: entityType,
		EntityID:   entityID,
	}
	mock.lockLocate.Lock()
	mock.calls.Locate = append(mock.calls.Locate, callInfo)
	mock.lockLocate.Unlock()
	return mock.LocateFunc(ctx, entityType, entityID)
}

// LocateCalls gets all the calls that were made to Locate.
// Check the length with:
//
//	len(mockedEntityLocator.LocateCalls())
func (mock *EntityLocatorMock) LocateCalls() []struct {
	Ctx        context.Context
	EntityType string
	EntityID   string
} {
	var calls []struct {
		Ctx        context.Context
		EntityType string
		EntityID   string
	}
	mock.lockLocate.RLock()
	calls = mock.calls.Locate
	mock.lockLocate.RUnlock()
	return calls
}
